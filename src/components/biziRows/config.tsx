import Head from "next/head";

import React, { useContext, useEffect, useState } from "react";
import { SiGithubactions } from "react-icons/si";
import Actions from "~/components/biziRows/actions";
import { AdminDataContext } from "~/context/adminContext";
import { headerType, updateConfig } from "~/hooks/admin/helper";

function Config() {
  const { renderdScreen, setRenderdScreen } = useContext(AdminDataContext);
  return (
    <div
      className={
        "flex flex-col items-center justify-center bg-gray-700 text-white"
      }
    >
      <Head>
        <title> הגדרות גת אביגדור UI</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main dir="rtl" className="flex h-screen w-screen flex-col items-center">
        <div className="mb-8 flex flex-row-reverse justify-center gap-6">
          <Actions />
          <h1 className="flex text-sm font-extrabold tracking-tight text-white ">
            Bizi
            <span className="text-[hsl(280,100%,70%)]">row</span>{" "}
            <span>
              {" "}
              <SiGithubactions />
            </span>
          </h1>
        </div>
        {renderdScreen == "main" && (
          <div className="flex flex-col justify-center">
            <a
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              onClick={() => setRenderdScreen && setRenderdScreen("headers")}
              target="_blank"
            >
              <h3 className="text-2xl font-bold">הגדרות שורה →</h3>
              <div className="text-lg">
                הגדר כותרות חלופיות, עמודות מוסתרות ועוד...
              </div>
            </a>
          </div>
        )}
        {renderdScreen == "headers" && setRenderdScreen && (
          <div className="flex w-full justify-center ">
            <HeadersTable setRenderdScreen={setRenderdScreen} />
          </div>
        )}
      </main>
    </div>
  );
}

export default Config;

const nameHashing = {
  initialName: "שם מקורי",
  replacmentName: "שם חלופי",
  toShow: "להראות",
  colID: "מזהה עמודה",
  position: "מיקום",
};

const isEquel = (
  startingHeaders: headerType[],
  configHeaders: headerType[]
) => {
  const Headers = Object.keys(startingHeaders);
  let hasChanges = false;
  for (let i = 0; i <= configHeaders.length - 1; i++) {
    for (let j = 0; j <= Headers.length - 1; j++) {
      if (
        startingHeaders[Headers[j] as keyof typeof startingHeaders] !==
        configHeaders[Headers[j] as keyof typeof configHeaders]
      )
        hasChanges = true;
    }
  }
  return hasChanges;
};

const HeadersTable = ({
  setRenderdScreen,
}: {
  setRenderdScreen: React.Dispatch<React.SetStateAction<string>>;
}) => {
  const { headers, setHeaders } = useContext(AdminDataContext);
  const [configHeaders, setConfigHeaders] = useState<
    headerType[] | undefined
  >();

  useEffect(() => {
    if (headers) setConfigHeaders([...headers]);
  }, [headers]);
  const handleEditingEnd = () => {
    if (!configHeaders || !headers) return;
    const toUpdate = isEquel(configHeaders, headers);
    if (toUpdate) {
      setHeaders && setHeaders([...configHeaders]);
      updateConfig(configHeaders);
    }
    setRenderdScreen("main");
  };
  return (
    <>
      <div className="flex w-10/12 flex-col gap-4 border-2 border-pink-300">
        <a
          className="flex max-w-xs flex-col  rounded-xl bg-white/10  text-white hover:bg-white/20"
          onClick={handleEditingEnd}
          target="_blank"
        >
          <h3 className="text-2xl font-bold">מסך הגדרות →</h3>
        </a>
        <div className="flex w-full  justify-center border-2 border-gray-400 shadow-lg ">
          {headers &&
            Object.keys(headers[0] ?? {}).map((h: string) => {
              if (h != "_id")
                return (
                  <p className="w-1/3  text-center">
                    {nameHashing[h as keyof typeof nameHashing]}
                  </p>
                );
            })}
        </div>

        {configHeaders &&
          headers &&
          configHeaders.map((header, idx) => (
            <div className="flex w-full items-center justify-center text-sm ">
              {Object.values(header).map((cell, index) => {
                let currentKey = Object.keys(configHeaders[0] ?? {})[index];
                if (currentKey !== "_id") {
                  if (currentKey == "initialName")
                    return (
                      <p className=" w-1/2  text-center   md:w-1/3  ">{cell}</p>
                    );
                  if (currentKey == "replacmentName")
                    return (
                      <input
                        onChange={(E) =>
                          setConfigHeaders((prev: headerType[] | undefined) => {
                            if (!prev) return;
                            return prev.map(
                              (line: headerType, index: number) => {
                                if (index == idx)
                                  return {
                                    ...line,
                                    replacmentName: E.target.value,
                                  };
                                else return line;
                              }
                            );
                          })
                        }
                        className="w-1/3 text-center text-black"
                        value={cell}
                        type="text"
                      ></input>
                    );
                  if (Object.keys(configHeaders[0] ?? {})[index] == "toShow")
                    return (
                      <input
                        onChange={(E) => {
                          setConfigHeaders((prev: headerType[] | undefined) => {
                            if (!prev) return;
                            return prev.map(
                              (line: headerType, index: number) => {
                                if (index == idx)
                                  return { ...line, toShow: E.target.checked };
                                else return line;
                              }
                            );
                          });
                          if (!headers) return;
                        }}
                        className="w-1/3 text-center"
                        type="checkbox"
                        checked={cell}
                      />
                    );
                  if (Object.keys(configHeaders[0] ?? {})[index] == "colID")
                    return (
                      <p className=" w-1/3 text-center ">{cell.slice(0, 5)}</p>
                    );
                  else
                    return <p className="auto w-1/3  text-center  ">{cell}</p>;
                }
              })}{" "}
            </div>
          ))}
      </div>
    </>
  );
};
