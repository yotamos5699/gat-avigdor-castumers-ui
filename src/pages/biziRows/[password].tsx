import axios from "axios";
import { SiGithubactions } from "react-icons/si";
import Model from "../../components/Module";

import { useContext, useEffect, useState } from "react";

import Spinner from "~/components/Spinner";
import Actions from "~/components/biziRows/actions";
import { AdminDataContext, status2global_check } from "~/context/adminContext";
import Head from "next/head";
import { getConfig, headerType, useAdminData } from "~/hooks/admin/helper";
import TableData from "~/components/biziRows/Table";
import Config from "~/components/biziRows/config";
import { BsTelephone } from "react-icons/bs";

export const colmsNumber = 12;

export async function getServerSideProps(context: any) {
  const { params } = context;
  if (params.password == "123") {
    const orders = await axios(
      "https://script.google.com/macros/s/AKfycbyfBt4Ueq6GAULew28xiJrl7T-dIfNDkNm1VZmAzLiD1MySjnTkP5icgtCARxNZ_wN4/exec?type=orders",
      { withCredentials: false }
    ).then((res) => res.data);
    const config = await getConfig();
    return {
      props: {
        renderType: "model",
        data: {
          orders: orders,
          config: { headers: config.status ? config.data.headersConfig : null },
        },
      },
    };
  }
}

export const AdminData = ({
  data,
  renderType,
}: {
  data: any;
  renderType: "model" | "full";
}) => {
  const [produceModule, togleProduceModule] = useState(false);
  const {
    viewType,
    setViewType,
    setGlobalChecking,
    setStatusCounter,
    statusCounter,
    globalChecking,
    renderdScreen,
  } = useContext(AdminDataContext);
  const [loading, setLoading] = useState(false);
  const { headers, ordersData, setOrdersData } = useAdminData(data, loading);

  const handleClick = (e: any, lineID: any, type: string, from?: string) => {
    if (from && from == "row")
      setOrdersData((prev) => {
        let prevStatus: any;
        const newArray = prev?.map((line) => {
          if (line.rowID == lineID) {
            prevStatus = line.status ?? null;
            return { ...line, status: type };
          }
          return line;
        });
        if (prevStatus)
          setStatusCounter &&
            setStatusCounter((prev) => ({
              ...prev,
              [type]: prev[type as keyof typeof prev] + 1,
              [prevStatus]: prev[prevStatus as keyof typeof prev] - 1,
            }));
        return newArray;
      });
  };

  useEffect(() => {
    Object.keys(statusCounter).map((header) => {
      const key = status2global_check[
        header as keyof typeof status2global_check
      ] as keyof typeof globalChecking;
      if (
        statusCounter[header as keyof typeof statusCounter] ==
          statusCounter.global &&
        globalChecking[key] == false
      )
        setGlobalChecking &&
          setGlobalChecking((prev) => ({ ...prev, [key]: true }));
      if (
        statusCounter[header as keyof typeof statusCounter] <
          statusCounter.global &&
        globalChecking[key] == true
      )
        setGlobalChecking &&
          setGlobalChecking((prev) => ({ ...prev, [key]: false }));
    });
    console.log({ statusCounter });
  }, [statusCounter]);

  useEffect(() => {
    // }
    if (ordersData && statusCounter.global == 0)
      setStatusCounter &&
        setStatusCounter((prev) => ({
          ...prev,
          global: ordersData.length,
          ללא: ordersData.length,
        }));
    // console.log({ ordersData });
  }, [ordersData]);
  return (
    <div
      className={
        " flex h-screen w-screen flex-col items-center  justify-center "
      }
    >
      <Head>
        <title>גת אביגדור UI</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="h-screen w-full p-2 ">
        {loading ? (
          <Spinner />
        ) : renderdScreen == "admin" ? (
          setViewType && (
            <div className="flex h-full flex-col ">
              <Actions />
              <div className="flex flex-col">
                <h1 className="ml-8 flex text-3xl font-extrabold tracking-tight text-gray-600 ">
                  Bizi
                  <span className="text-[hsl(280,100%,70%)]">row</span>{" "}
                  <span>
                    {" "}
                    <SiGithubactions />
                  </span>
                  <p className="ml-2 mt-1 text-xl font-light text-gray-500">
                    | הכל במקום אחד
                  </p>
                </h1>

                <div className="   flex flex-row-reverse justify-center gap-6   ">
                  {/* felx/relative/grid/hidden/block */}
                  <div className="mt-6 flex w-full flex-row-reverse items-end justify-center  gap-2 md:hidden ">
                    <Buttons
                      togleProduceModule={togleProduceModule}
                      setViewType={setViewType}
                      setGlobalChecking={setGlobalChecking}
                      setOrdersData={setOrdersData}
                      globalChecking={globalChecking}
                      style={2}
                    />
                  </div>
                  <div className=" hidden w-full flex-row-reverse items-end  justify-center gap-2 md:flex  ">
                    <Buttons
                      togleProduceModule={togleProduceModule}
                      setViewType={setViewType}
                      setGlobalChecking={setGlobalChecking}
                      setOrdersData={setOrdersData}
                      globalChecking={globalChecking}
                      style={1}
                    />
                  </div>
                </div>
              </div>
              {headers && (
                <div className="mb-2 flex h-20 w-full flex-row-reverse items-center justify-center  gap-4  rounded-t-lg  bg-gray-800   text-center text-white ">
                  {headers.map((cell: headerType, index: number) => {
                    if (cell.toShow && index <= colmsNumber) {
                      if (cell.replacmentName == "טלפון")
                        return <BsTelephone className="w-10" />;

                      return (
                        <p
                          key={JSON.stringify(cell)}
                          className=" header1  text-center  font-bold"
                        >
                          {cell.replacmentName ?? cell.initialName}
                        </p>
                      );
                    }
                  })}

                  <div className="header1 flex h-10 w-1/5 items-center justify-center rounded-md bg-green-500 text-center font-semibold text-white hover:bg-green-600 ">
                    <input
                      onChange={(e) => {
                        const action = e.target.checked;

                        setGlobalChecking &&
                          setGlobalChecking((prev) => ({
                            ...prev,
                            matrix: !globalChecking.matrix,
                          }));
                        setOrdersData((prev) =>
                          prev?.map((p) => ({
                            ...p,
                            status: action ? "במטריצה" : "ללא",
                          }))
                        );
                      }}
                      checked={globalChecking.matrix}
                      type="checkbox"
                    />
                    <button className="gap-2">הפק הכל</button>
                  </div>
                  <div className="header1 header2 flex h-10  w-1/5 items-center justify-center rounded-md bg-red-500 text-center text-[15px] font-semibold text-white ring-red-300 hover:bg-red-600">
                    <input
                      onChange={(e) => {
                        const action = e.target.checked;
                        setGlobalChecking &&
                          setGlobalChecking((prev) => ({
                            ...prev,
                            delete: !globalChecking.delete,
                          }));
                        setOrdersData((prev) =>
                          prev?.map((p) => ({
                            ...p,
                            status: action ? "למחוק" : "ללא",
                          }))
                        );
                      }}
                      checked={globalChecking.delete}
                      type="checkbox"
                    />
                    <button className="">בטל הכל</button>
                  </div>
                </div>
              )}
              {headers && (
                <TableData
                  data={ordersData}
                  handleClick={handleClick}
                  type={viewType}
                />
              )}

              {produceModule && (
                <Model
                  toggleModule={togleProduceModule}
                  data={ordersData}
                  setLoading={setLoading}
                />
              )}
            </div>
          )
        ) : (
          renderdScreen != "admin" && <Config />
        )}
      </main>
    </div>
  );
};

export default AdminData;

const Buttons = ({
  togleProduceModule,
  setViewType,
  setGlobalChecking,
  setOrdersData,
  globalChecking,
  style,
}: {
  togleProduceModule: any;
  setViewType: any;
  setGlobalChecking: any;
  setOrdersData: any;
  globalChecking: any;
  style: number;
}) => {
  return (
    <>
      <button
        onClick={() => setViewType("במטריצה")}
        className={
          style == 1
            ? `h-12 w-1/12  rounded-t-lg  bg-[hsl(280,100%,70%)] text-lg font-bold text-white`
            : "h-12 w-[14%] rounded-t-lg  bg-[hsl(280,100%,70%)] text-center text-sm font-bold text-white"
        }
      >
        להפקה{" "}
      </button>
      <button
        onClick={() => setViewType("למחוק")}
        className={
          style == 1
            ? `h-12 w-1/12  rounded-t-lg  bg-[hsl(280,100%,70%)] text-lg font-bold text-white`
            : "h-12 w-[14%] rounded-t-lg  bg-[hsl(280,100%,70%)] text-center text-sm font-bold text-white"
        }
      >
        {" "}
        ביטולים
      </button>
      <button
        onClick={() => setViewType("ללא")}
        className={
          style == 1
            ? ` h-12 w-1/12  rounded-t-lg  bg-[hsl(280,100%,70%)] text-lg font-bold text-white`
            : "h-12 w-[14%]  rounded-t-lg  bg-[hsl(280,100%,70%)] text-center text-sm font-bold text-white"
        }
      >
        {" "}
        לא טופל{" "}
      </button>
      <button
        onClick={() => setViewType("הכל")}
        className={
          style == 1
            ? ` h-12 w-1/12 rounded-t-lg  bg-[hsl(280,100%,70%)] text-lg font-bold text-white`
            : "h-12 w-[14%]  rounded-t-lg  bg-[hsl(280,100%,70%)] text-center text-sm font-bold text-white"
        }
      >
        {" "}
        הכל
      </button>
      <button
        onClick={() => {
          togleProduceModule(true);
        }}
        className={
          style == 1
            ? ` mb-10 mr-36 h-12 w-20 rounded-lg bg-indigo-600 text-center font-bold text-white hover:bg-indigo-700 hover:text-white`
            : " h-14 w-[14%] rounded-lg bg-indigo-600 text-center font-bold text-white "
        }
      >
        הפק
      </button>

      <button
        className={
          style == 1
            ? `
          mb-10 mr-6 h-12 w-20 rounded-lg bg-indigo-300 text-center font-bold text-black hover:bg-indigo-400 hover:text-white`
            : " h-14 w-[14%] rounded-lg bg-indigo-300 text-center font-bold text-black"
        }
        onClick={() => {
          setGlobalChecking &&
            setGlobalChecking((prev: any) => ({
              ...prev,
              reset: !globalChecking.reset,
            }));
          setOrdersData((prev: any) =>
            prev?.map((p: any) => ({
              ...p,
              status: "ללא",
            }))
          );
        }}
      >
        אפס
      </button>
    </>
  );
};
